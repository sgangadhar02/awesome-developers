webpackJsonp([1],{DOf8:function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=n("U7vG"),i=function(e){return e&&e.__esModule?e:{default:e}}(u),s=[],c=function(e){function t(e){r(this,t);var n=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={developers:[]},n.searchDeveloper=n.searchDeveloper.bind(n),n}return a(t,e),l(t,[{key:"componentDidMount",value:function(){var e=this;fetch("https://api.github.com/repos/shreyas-a/awesome-developers/contents/developers.json").then(function(e){return e.json()}).then(function(e){return atob(e.content)}).then(function(e){return JSON.parse(e)}).then(function(t){s=t,e.setState({developers:s})})}},{key:"searchDeveloper",value:function(e){var t=s;t=t.filter(function(t){return-1!==t.name.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.company.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.city.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.github.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.email.toLowerCase().search(e.target.value.toLowerCase())||t.skills.find(function(t){return t.includes(e.target.value.toLowerCase())})}),this.setState({developers:t})}},{key:"render",value:function(){return i.default.createElement("div",null,i.default.createElement("h1",null,"Awesome Developers"),i.default.createElement("input",{type:"text",placeholder:"Search",onChange:this.searchDeveloper}),i.default.createElement("div",null,i.default.createElement("p",null,"A curated list of awesome developers."),i.default.createElement("div",{className:"developer-list"},this.state.developers.map(function(e,t){return i.default.createElement("div",{className:"developer",key:t},i.default.createElement("img",{src:"https://avatars.githubusercontent.com/"+e.github,className:"profile-image",alt:"profile"}),i.default.createElement("div",null,e.name),i.default.createElement("div",null,e.skills.join(", ")),i.default.createElement("div",null,e.company),i.default.createElement("div",null,e.city),i.default.createElement("div",null,e.github),i.default.createElement("div",null,e.email))}))))}}]),t}(u.Component);t.default=c},"XgI/":function(e,t,n){t=e.exports=n("FZ+f")(void 0),t.push([e.i,".developer-list {\n  text-align: center; }\n\n.developer {\n  border: 1px solid grey;\n  border-radius: 10px;\n  padding: 10px;\n  margin: 10px;\n  width: 30%;\n  display: inline-block; }\n\n.profile-image {\n  width: 50px;\n  border-radius: 30px; }\n",""])},"Yq+E":function(e,t,n){var r=n("XgI/");"string"==typeof r&&(r=[[e.i,r,""]]);var o={};o.transform=void 0;n("MTIv")(r,o);r.locals&&(e.exports=r.locals)},qYAe:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var o=n("U7vG"),a=r(o),l=n("O27J"),u=n("DOf8"),i=r(u);n("Yq+E"),(0,l.render)(a.default.createElement(i.default,null),document.getElementById("root"))}},["qYAe"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,